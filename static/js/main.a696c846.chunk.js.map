{"version":3,"sources":["components/button.jsx","logo.svg","main/calculadora.jsx","components/display.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","triple","double","onClick","e","click","label","className","module","exports","initialState","displayValue","clearDisplay","values","current","Calculator","state","clearMemo","bind","addDigit","setOperation","this","setState","equals","currentOperation","eval","n","includes","i","newValue","parseFloat","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a696c846.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./button.css\"\r\n\r\n\r\nexport default props => {\r\n    let classes = \"button \"\r\n    classes += props.operation ? \"operation\" : \"\"\r\n    classes += props.triple ? \"triple\" : \"\"\r\n    classes += props.double ? \"double\" : \"\"\r\n    return (\r\n        <button\r\n            onClick={e => props.click && props.click(props.label)}  className={classes}>{props.label}</button>\r\n    )\r\n}\r\n\r\n\r\n\r\n       ","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport \"./calculadora.css\"\r\nimport Button from \"../components/button\"\r\nimport Display from \"./../components/display\"\r\n\r\nconst initialState = {\r\n    displayValue: \"0\",\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clearMemo = this.clearMemo.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n    }\r\n\r\n    clearMemo() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if (this.state.current === 0) {\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === \"=\"\r\n            const currentOperation = this.state.operation\r\n            const values = [...this.state.values]\r\n            values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                clearDisplay: !equals,\r\n                values,\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n            })\r\n\r\n\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n        if (n === \".\" && this.state.displayValue.includes(\".\")) {\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === \"0\" || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? \"\" : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue, clearDisplay: false })\r\n\r\n        if (n !== \".\") {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"calculator\">\r\n                <Display value={this.state.displayValue} />\r\n                <Button click={this.clearMemo} label=\"AC\" triple />\r\n                <Button click={this.setOperation} operation label=\"/\" />\r\n                <Button click={this.addDigit} label=\"7\" />\r\n                <Button click={this.addDigit} label=\"8\" />\r\n                <Button click={this.addDigit} label=\"9\" />\r\n                <Button click={this.setOperation} operation label=\"*\" />\r\n                <Button click={this.addDigit} label=\"4\" />\r\n                <Button click={this.addDigit} label=\"5\" />\r\n                <Button click={this.addDigit} label=\"6\" />\r\n                <Button click={this.setOperation} operation label=\"-\" />\r\n                <Button click={this.addDigit} label=\"1\" />\r\n                <Button click={this.addDigit} label=\"2\" />\r\n                <Button click={this.addDigit} label=\"3\" />\r\n                <Button click={this.setOperation} operation label=\"+\" />\r\n                <Button click={this.addDigit} label=\"0\" double />\r\n                <Button click={this.addDigit} label=\".\" />\r\n                <Button click={this.setOperation} operation label=\"=\" />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport \"./display.css\"\r\n\r\n\r\nexport default props =>\r\n    <div className=\"display\">{props.value}</div>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Calculadora from \"./main/calculadora\"\n\nReactDOM.render(\n  <div>\n  <h1>Calculadora</h1>\n    <Calculadora />\n  \n  </div>\n  \n  \n  \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}